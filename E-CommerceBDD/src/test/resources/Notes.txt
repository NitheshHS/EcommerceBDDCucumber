Generating a report in cucumber
In order to generate cucumber report we go for plugin cucumber option where we can provide key aand value
key:- format of file
value:- path of file
plugin={"html:target/file.html"}

What is the use of Background keyword in cucumber?
If we have common steps in feature file like launching browser or login we can use background

Scenario: Cheak whether the Price Slider working correct or not in Shop feature
Given as per user open the browser:- Hook

Given enter the URL
And click on Shop Menu 
When Shop page is displayed i will go on price slider
And Adjust the slider 150 to 350
And Click on filter button
Then verify the product price between 150 to 350 or not

public class Hook {
	/*
	 * 2. Launch the browser
        1. Exceute before scenario
	 */
	@Before(order = 0)
	public void beforeSceanrio(){
		System.out.println("Exceute before scenario");
	}
	
	@Before(order=1)
	public void setUp(){
		System.out.println("Launch the browser");
	}
	/*
	 * 2.Exceute after scenario
1. close the browser instance
	 */
	@After(order=1)
	public void tearDown() {
		System.out.println("close the browser instance");
	}

	@After(order=0)
	public void afterSceanrio() {
		System.out.println("Exceute after scenario");
	}
}



2. Webdriver utility
3. Page object model
4. extent report
5. Framework architecture

Webdriver utility:- It is a utilitybclass for webdriver methods
1. Handling dropdown
2. handling frame
3. handling multiple window
4. Taking screenshot
5. Mouse hover action
6. drag and drop
7. Handling slider bar
8. handling alert

1. taking screen shot for failed screnario
@After
public void tearDown(Scenario scenario){
if(scenario.isFailed){
byte[] screenshot = base.webUtility.takeScreenshot(base.driver);
scenario.attach(screenshot, "image/png", scenario.getName());
}
}


Developing a pom class
1. Identify all webelemenet using @findBy and provide access specifier as private
2. In order to get those private WebElement provide getters
3. Provide business logic if neccessory
4. Provide a constructor for initializing the webElement

How do re run failed test script?
provide the path of rerun.txt file

plugin={"rerun.txt"}













